# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gsQPN528N1SZjT72tOpDMZWLEUeXsXL6
"""

# !pip install gspread requests pandas
import gspread
import requests
import pandas as pd
import json
import sys

# Configurar o acesso ao Notion
NOTION_URL = "https://api.notion.com/v1/pages/"
NOTION_TOKEN = "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"
DATABASE_ID = "130d7315decb80a6be6ed093c926746e" #"e508acfe56004a48af0055524a3ca850"

HEADERS = {
    "Authorization": f"Bearer {NOTION_TOKEN}",
    "Content-Type": "application/json",
    "Notion-Version": "2022-06-28"
}

gc = None

def parse_brl_to_float(value):
    value = str(handle_div_zero(value))
    value = value.replace("R$", "").strip()
    value = value.replace(".", "").replace(",", ".")
    return float(value)

def parse_percent(value):
    value = str(handle_div_zero(value))
    value = value.replace('%', '').strip()
    value = float(value) / 100

def handle_div_zero(value):
    if value == "#DIV/0!":
        return 0  # or None, depending on the use case
    else:
        try:
            return float(value)
        except ValueError:
            return value

def open_sheet(sheet_name, sheet_page='PAINEL OUTUBRO/2024'):
    try:
        sheet = gc.open(sheet_name).worksheet(sheet_page)
    except:
        sheet = gc.open_by_url(sheet_name).worksheet(sheet_page)
    data = sheet.get_all_values()
    df = pd.DataFrame.from_records(data)
    return df

def print_sheet_data(sheet_name, sheet_page='PAINEL OUTUBRO/2024'):
    open_sheet(sheet_name, sheet_page)
    print('nome dashboard: ' + df[1][1])
    print("# leads" + df[3][8])
    print("invest. ads" + df[1][8])
    print("taxa conversao agendamento" + df[1][11])
    print("# agendamentos" + df[3][11])
    print("taxa conversao comparecimento" + df[1][14])
    print("# realizado" + df[3][14])
    print("TAXA DE CONVERSÃO P/\nVENDA " + df[1][17])
    print("# vendas" + df[3][17])
    print("tkm" + df[1][20])
    print("faturamento" + df[3][20])
    print("roas" + df[5][20])

def df_to_metricas(df):
    metricas = {
        "nome_dashboard": df[1][1],
        "Nº DE LEADS 👥": int(df[3][8]),
        "INVESTIMENTO EM ADS 💸": parse_brl_to_float(df[1][8]),
        "N° DE AGENDAMENTOS": int(df[3][11]),
        "TAXA DE CONVERSÃO P/ AGENDAMENTO": parse_percent(df[1][11]),
        "N° DE REALIZADO":  int(df[3][14]),
        "TAXA DE CONVERSÃO P/ COMPARECIMENTO":  parse_percent(df[1][14]),
        "N° DE VENDAS": int(df[3][17]),
        "TAXA DE CONVERSÃO P/ VENDA":  parse_percent(df[1][17]),
        "FATURAMENTO": parse_brl_to_float(df[3][20]),
        "TKM": parse_brl_to_float(df[1][20]),
        "ROAS": parse_brl_to_float(df[5][20])
    }
    return metricas

def notion_client_id(client_name) -> str:
    # Verificar existencia do cliente na database:
    check_cliente_url = f'https://api.notion.com/v1/databases/{DATABASE_ID}/query'
    query_payload = {
        "filter": {
            "property": "Cliente",
            "rich_text": {
                "equals": client_name
            }
        }
    }
    response = requests.post(check_cliente_url, json=query_payload, headers=HEADERS)

    # print('verificando existencia do cliente: Status: ' + str(response.status_code))
    if response.status_code != 200:
        raise "Nao foi possível contactar ao notion, erro: " + response.text

    res = response.json()
    if len(res['results']) > 0:
        results = res['results']
        cliente_page_id = results[0]['id']
        return cliente_page_id
    return None

def notion_create_post_payload(cliente_nome, metricas):
    def create_nome(cliente_nome):
        return {
            "text": {
                "content": cliente_nome
            }
        }
    payload = {
        "parent": {"database_id": DATABASE_ID},
        "properties": {}
    }

    payload['properties'] = metricas
    payload['properties']['title'] = [create_nome(cliente_nome)]
    del(payload['properties']['nome_dashboard'])
    return payload

def notion_create_patch_payload(metricas):
    patch_payload = { 'properties': metricas }
    del(patch_payload['properties']['nome_dashboard'])
    return patch_payload

def extract_client_name(nome_dashboard):
    return nome_dashboard[len("DASHBOARD -"):]

def main():
    global gc

    with open('credentials.json', 'r') as f:
        credentials = json.load(f)

    # Configurar credenciais do Google Sheets
    gc = gspread.service_account_from_dict(credentials)

    metricas = df_to_metricas(open_sheet('https://docs.google.com/spreadsheets/d/1WiR0sUpxMUAbD5QiHf12BOza5rftWeqMlZIpRUys0zk/edit?usp=sharing', 'PAINEL OUTUBRO/2024'))

    cliente_nome = extract_client_name(metricas['nome_dashboard'])
    del(metricas['nome_dashboard'])

    cliente_id = notion_client_id(cliente_nome)

    return cliente_id, cliente_nome, json.dumps(metricas)

    if cliente_id:
        payload = notion_create_patch_payload(metricas)
        response = requests.patch(NOTION_URL + cliente_id, json=payload, headers=HEADERS)
    else:
        payload = notion_create_post_payload(cliente_nome, metricas)
        response = requests.post(NOTION_URL, json=payload, headers=HEADERS)

    if response.status_code == 200:
        print("Dados enviados com sucesso para o Notion!")
    else:
        response_text = json.loads(response.text)
        print(f"Erro ao enviar dados para o Notion: {response.status_code} - {response_text}")


if __name__ == "__main__":
    main()
